{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handelChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","responseddd","json","users","this","filteredmonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kTAGaA,EAAM,SAAAC,GAAK,OAEpB,sBAAKC,UAAU,iBAAf,UAEG,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACnB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,G,MAAU,SAAAR,GAAK,OAExB,qBAAKC,UAAU,YAAf,SACMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCN9CM,G,YAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACpB,uBAAOZ,UAAU,SAASa,KAAK,SAC/BF,YAAaA,EACbG,SAAUF,MCiCCG,E,kDAjCb,aAAe,IAAD,8BACZ,gBAUFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SATtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAW,OAAIA,EAAYC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAKtI,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBACrBC,aAAce,KAAKf,eACrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAxBVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,SAMlDX,M","file":"static/js/main.ec5a89a5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card= props=>(\r\n   \r\n    <div className='card-container'>\r\n      \r\n       <img alt='image' src={`https://robohash.org/${props.monster.id}?set=set2`}></img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component';    \r\nimport './card-list.styles.css';\r\n\r\n\r\n\r\nexport const CardList= props=>(  \r\n \r\n    <div className=\"card-list\">\r\n         {props.monsters.map(monster =>(<Card key={monster.id} monster={monster}/>\r\n         ))}\r\n     </div>\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox= ({placeholder,handelChange})=>(\r\n    <input className='search' type='search'\r\n    placeholder={placeholder}\r\n    onChange={handelChange}/>\r\n);","import { CardList } from './components/card-list/card-list.component'\nimport './App.css';\nimport { Component } from 'react';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(responseddd => responseddd.json()).then(users => this.setState({ monsters: users }))\n  }\n  handelChange = e => {\n    this.setState({ searchField: e.target.value })\n  };\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredmonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters rolodex</h1>\n        <SearchBox placeholder='search monsters'\n          handelChange={this.handelChange} />\n        <CardList monsters={filteredmonsters} />\n\n\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App /> , document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}